version: 2.1

orbs:
  coverage-reporter: codacy/coverage-reporter@13.15.0
  docker: circleci/docker@2.5.0

jobs:
  testing-and-generating-report:
    docker:
      - image: cimg/python:3.11
    resource_class: small
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-testing-{{ checksum "poetry.lock" }}
      - run:
          name: install packages
          command: |
            poetry install --no-root --with test
      - run:
          name: create directory for tests reports
          command: mkdir test-results
      - run:
          name: Generate test report
          command: |
            poetry run pytest --junitxml=test-results/junit.xml --cov-report xml:coverage.xml --cov=app tests/
      - store_test_results:
          path: test-results
      - persist_to_workspace:
          root: .
          paths:
            - coverage.xml
      - save_cache:
          key: v1-testing-{{ checksum "poetry.lock" }}
          paths:
            - ".venv"
  setup:
    docker:
      - image: cimg/python:3.11
    resource_class: small
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-linting-{{ checksum "poetry.lock" }}
      - run:
          name: Install packages
          command: |
            poetry install --no-root --only linting
      - persist_to_workspace:
          root: .
          paths:
            - "app"
            - "tests"
            - "pyproject.toml"
            - "poetry.lock"
      - save_cache:
          key: v1-linting-{{ checksum "poetry.lock" }}
          paths:
            - ".venv"
  linting-ruff:
    docker:
      - image: cimg/python:3.11
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - v1-linting-{{ checksum "poetry.lock" }}
      - run:
          name: Install packages
          command: |
            poetry install --no-root --only linting
      - run:
          name: ruff linting
          command: |
            poetry run ruff --fix
      - run:
          name: ruff formatting
          command: |
            poetry run ruff format
      - save_cache:
          key: v1-linting-{{ checksum "poetry.lock" }}
          paths:
            - ".venv"
  linting-bandit:
    docker:
      - image: cimg/python:3.11
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - v1-linting-{{ checksum "poetry.lock" }}
      - run:
          name: Install packages
          command: |
            poetry install --no-root --only linting
      - run:
          name: security linting with bandit
          command: |
            poetry run bandit -c pyproject.toml -r app/
      - save_cache:
          key: v1-linting-{{ checksum "poetry.lock" }}
          paths:
            - ".venv"
  linting-mypy:
    docker:
      - image: cimg/python:3.11
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - v1-linting-{{ checksum "poetry.lock" }}
      - run:
          name: Install packages
          command: |
            poetry install --no-root --with linting
      - run:
          name: mypy type checking
          command: |
            poetry run mypy -p app
      - save_cache:
          key: v1-linting-{{ checksum "poetry.lock" }}
          paths:
            - ".venv"
  linting-pytype:
    docker:
      - image: cimg/python:3.11
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - v1-linting-{{ checksum "poetry.lock" }}
      - run:
          name: Install packages
          command: |
            poetry install --no-root --with linting
      - run:
          name: pytype type checking
          command: |
            poetry run pytype
      - save_cache:
          key: v1-linting-{{ checksum "poetry.lock" }}
          paths:
            - ".venv"
  codacy-coverage-report:
    docker:
      - image: circleci/openjdk:8-jdk
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - coverage-reporter/send_report:
          coverage-reports: coverage.xml
          project-token: $CODACY_PROJECT_TOKEN

workflows:
  test-and-publish:
    jobs:
      - setup:
          filters:
            tags:
              only: /.*/
      - linting-ruff:
          filters:
            tags:
              only: /.*/
          requires:
            - setup
      - linting-bandit:
          filters:
            tags:
              only: /.*/
          requires:
            - setup
      - linting-mypy:
          filters:
            tags:
              only: /.*/
          requires:
            - setup
      - linting-pytype:
          filters:
            tags:
              only: /.*/
          requires:
            - setup
      - testing-and-generating-report:
          filters:
            tags:
              only: /.*/
          requires:
            - linting-ruff
            - linting-bandit
            - linting-mypy
            - linting-pytype
      - codacy-coverage-report:
          filters:
            tags:
              only: /.*/
          requires:
            - testing-and-generating-report
      - docker/publish:
          filters:
            branches:
              only: main
          requires:
            - testing-and-generating-report
          image: ${DOCKER_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}
          tag: ${CIRCLE_SHA1}-${CIRCLE_TAG}, latest
          use-buildkit: true
