[tool.poetry]
name = "skillventory"
version = "0.3.0"
description = "REST API to manage a personal inventory"
authors = [
    "Ulises Alexander Arguelles Monjaraz <ulises_alexander_am@proton.me>",
]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = {extras = ["standard"], version = "^0.115.2"}
pydantic-settings = "^2.6.0"
pydantic = "^2.9.2"
uvicorn = {extras = ["standard"], version = "^0.26.0"}
loguru = "^0.7.2"
sqlmodel = "^0.0.14"
fastui = "^0.5.2"
sqlalchemy-libsql = "^0.1.0"

[tool.poetry.group.linting]
optional = true

[tool.poetry.group.linting.dependencies]
ruff = "^0.1.13"
mypy = "^1.4.1"
bandit = {extras = ["toml"], version = "^1.7.5"}
commitizen = "^3.10.0"
pre-commit = "^3.4.0"
pytype = "^2024.4.11"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.4.4"
pytest-cov = "^4.1.0"
httpx = "^0.26.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs-material = "^9.5.4"

[tool.mypy]
plugins = ["pydantic.mypy"]

follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true

# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true

[tool.ruff]
preview = true

[tool.ruff.lint]
select = [
       #Default rules
       "E4", "E7", "E9", # pycodestyle errors
       "F", # pyflakes
       #Non-default rules
       "C90", # mccabe (too complex)
       "N", # pep8-naming
       "UP", # pyupgrade
       "S", # flake8-bandit
       "B", # flake8-bugbear
       "A", # flake8-builtins
       "C4", # flake8-comprehensions
       "EM", # flake8-errmsg
       "ICN", # flake8-import-conventions
       "PT", # flake8-pytest-style
       "RET", # flake8-return
       "SIM", # flake8-simplify
       "TID", # flake8-tidy-imports
       "PL", # pylint
       "RUF" # ruff-specific-rules
       ]
ignore = []
# Preview rules
extend-select = [
              "PLC0415", # import-outside-top-level
              "PLC1901", # compare-to-empty-string
              "PLC2401", # non-ascii-name
              "PLC2403", # non-ascii-import-name
              "PLE0704", # misplaced-bare-raise
              "PLE1132", # repeated-keyword-argument
              "PLR0202", # no-classmethod-decorator
              "PLR0203", # no-staticmethod-decorator
              "PLR0904", # too-many-public-methods
              "PLR0916", # too-many-boolean-expressions
              "PLR0917", # too-many-positional
              "PLR1704", # redefined-argument-from-local
              "PLR1733", # unnecessary-dict-index-lookup
              "PLR1736", # unnecessary-list-index-lookup
              "PLR6201", # literal-membership
              "PLW1501", # bad-open-mode
              "PLW1514", # unspecified-encoding
              "PLW3201", # bad-dunder-method-name
              "FURB", # refurb
              "RUF017", # quadratic-list-summation
              "RUF018", # assignment-in-assert
              "RUF019", # unnecessary-key-check
              ]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"**/tests/*" = ["S101","PLR0913", "PLR0917", "PLR6301","PT004"]
"**/models.py" = ["RUF012"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true


[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "pep440"
version_provider = "poetry"
update_changelog_on_bump = true
major_version_zero = true

[tool.bandit]
exclude_dirs=["tests"]

[tool.pytype]
inputs = ["skillventory"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
