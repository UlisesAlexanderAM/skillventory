{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Skillventory","text":"<p>\ud83d\udcd8 Documentation \ud83d\udcbb Source code</p> <p>An API to manage a personal inventory.</p> What's a personal inventory? <p>In this case a personal inventory is a set of skills,  knowledge and competences that a person has or is  interest in obtain.</p>"},{"location":"#motivation","title":"\ud83d\udca1 Motivation","text":"<p>While taking a course about Career Plan Design and Development in Platzi. I came access this concept of a Personal Inventory and how this is part of the self-knowledge toolkit. I wanted to use it but I wasn't happy with my first iteration using worksheets. So I decide to build it as a webapp, then I decide to first build the API. In the future I'll add one or more front-end as demos.</p>"},{"location":"#quickstart","title":"\ud83d\ude80 Quickstart","text":""},{"location":"#docker","title":"Docker","text":"Local useDeployment <pre><code>docker run -p &lt;Local_Port&gt;:80 ulisesalexanderam/skillventory:latest\n</code></pre> <p>Where the <code>Local_Port</code> is the port where you want to access the container from the host.</p> <pre><code>docker run -p &lt;Deployment_Host_Port&gt;:80 ulisesalexanderam/skillventory:latest\n</code></pre> <p>Where the <code>Deployment_Host_Port</code> is the port in the deployment host from where you give access to the container.</p>"},{"location":"#roadmap","title":"\ud83c\udfaf Roadmap","text":"<p>Here is a little roadmap of what I want to implement and what its already implemented.</p> <ul> <li> Complete CRUD API (functions that interact with the DB)</li> <li> Rest API for the personal inventory</li> <li> Upload Docker image to Docker Hub</li> <li> Simple demo web client</li> <li> Simple gtk+ desktop client</li> </ul>"},{"location":"#contributing","title":"\ud83d\ude4c Contributing","text":"<p>I really appreciate any kind of contributions but I list how you can contribute in some specific ways. Skillventory is currently develop and maintain by Ulises Alexander AM. I'm looking for additional maintainers that can help improve this project.</p>"},{"location":"#providing-feedback","title":"Providing feedback","text":"<p>You can provide feedback using the issues feature of GitHub. Open an Issue to request features, report bugs, or ask a question.</p>"},{"location":"#graphic-design","title":"Graphic Design","text":"<p>At the moment Skillventory doesn't have a logo or any kind of supplemental imagery. So I welcome any submissions or suggestions for the logo and graphics associated with Skillventory</p>"},{"location":"#documentation","title":"Documentation","text":"<p>You can help me proofreading and fixing any typo or formatting issues in the <code>docs/</code> or <code>README</code> files. Material for MkDocs is use to build and publish the documentation.</p> <p>Note</p> <p>The <code>index.md</code> and <code>README.md</code> files are content equals.</p>"},{"location":"#code","title":"Code","text":"<p>You can also help with code.</p>"},{"location":"#setting-up-your-dev-enviroment","title":"Setting up your dev enviroment","text":"<p>The first thing you probably want to do is fork the project. You can do it from the web or if you have GH CLI installed in your system, with the following command:</p> <pre><code>gh repo fork UlisesAlexanderAM/skillventory\n</code></pre> <p>If you haven't clone your fork into your system, proceed to do it.</p> <p>This project uses poetry, so I recommend you install it first, if you don't already have it installed.</p> With pipxWith the official installer <pre><code>pipx install poetry\n</code></pre> <p>Linux, macOS, Windows(WSL)</p> <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre> <p>Windows(Powershell)</p> <pre><code>(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -\n</code></pre> <p>With poetry already in your system, and your fork, is time to install the dependencies.</p> Basic dev environmentWith linting toolsWorking with docsAll included <pre><code>poetry install --no-root --with test\n</code></pre> <pre><code>poetry install --no-root --with test linting\n</code></pre> <pre><code>poetry install --no-root --with docs\n</code></pre> <pre><code>poetry install --no-root -with test linting docs\n</code></pre> <p>You can use <code>poetry shell</code> to spawn a subshell, or is possible that your IDE already detects your environment.</p> <p>To test your code, simply use <code>pytest</code>.</p> Inside the environmentOutside the environment (environment not active) <pre><code>pytest\n</code></pre> <pre><code>poetry run pytest\n</code></pre> <p>Finally open a pull request, if you add new funtionality please add some tests. In case you don't know how or need help open your PR as a draft pull request.</p>"}]}